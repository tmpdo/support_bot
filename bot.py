import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "XXXXXXXXX"

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞—è–≤–∫–∏
COMMON_CHAT_ID = -XXXXX


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("support_bot.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            phone_number TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tickets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            group_name TEXT,
            problem TEXT,
            status TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
phone_request_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
phone_request_kb.add(KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))

group_menu = ReplyKeyboardMarkup(resize_keyboard=True)
group_menu.add(
    KeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ú–ò–°"),
    KeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é")
)
group_menu.add(
    KeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º"),
    KeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥—Ä—É–≥–∏–º –ü–û")
)
group_menu.add(
    KeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Å –≠–¶–ü"),
    KeyboardButton("–ù–∞–∑–∞–¥")
)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
        reply_markup=phone_request_kb
    )

@dp.message_handler(content_types=["contact"])
async def handle_contact(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.contact and message.contact.user_id == message.from_user.id:
        user_id = message.from_user.id
        username = message.from_user.username
        phone_number = message.contact.phone_number

        conn = sqlite3.connect("support_bot.db")
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, username, phone_number) VALUES (?, ?, ?)",
            (user_id, username, phone_number)
        )
        conn.commit()
        conn.close()

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
            reply_markup=main_menu
        )
    else:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")

@dp.message_handler(lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def select_group(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∑–∞—è–≤–∫–∏."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:", reply_markup=group_menu)

@dp.message_handler(lambda message: message.text in [
    "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ú–ò–°",
    "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é",
    "–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º",
    "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥—Ä—É–≥–∏–º –ü–û",
    "–ü—Ä–æ–±–ª–µ–º–∞ —Å –≠–¶–ü"
])
async def request_problem_description(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã."""
    group_name = message.text
    conn = sqlite3.connect("support_bot.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO tickets (user_id, username, group_name, status) VALUES (?, ?, ?, ?)",
        (message.from_user.id, message.from_user.username, group_name, "in_progress")
    )
    ticket_id = cursor.lastrowid
    conn.commit()
    conn.close()

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group_name}. –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ù–∞–∑–∞–¥")),
    )

@dp.message_handler(lambda message: True, content_types=["text"])
async def save_ticket(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ –æ–±—â–∏–π —á–∞—Ç."""
    conn = sqlite3.connect("support_bot.db")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id, group_name FROM tickets WHERE user_id = ? AND status = 'in_progress' ORDER BY id DESC LIMIT 1",
        (message.from_user.id,)
    )
    ticket = cursor.fetchone()

    if not ticket:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∑–∞—è–≤–∫–∏, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É.")
        return

    ticket_id, group_name = ticket
    cursor.execute(
        "UPDATE tickets SET problem = ?, status = 'open' WHERE id = ?",
        (message.text, ticket_id)
    )
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT phone_number FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    phone_number = user[0] if user else "–Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    conn.commit()
    conn.close()

    inline_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ (ID: {ticket_id})", callback_data=f"complete_{ticket_id}")
    )

    await bot.send_message(
        COMMON_CHAT_ID,
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (ID: {ticket_id}):\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
        f"üìÇ –ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
        f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {message.text}",
        reply_markup=inline_kb,
    )

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu)

@dp.callback_query_handler(lambda call: call.data.startswith("complete_"))
async def complete_ticket(call: types.CallbackQuery):
    """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    ticket_id = int(call.data.split("_")[1])

    conn = sqlite3.connect("support_bot.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id, user_id, username, problem FROM tickets WHERE id = ? AND status = 'open'", (ticket_id,))
    ticket = cursor.fetchone()

    if not ticket:
        await call.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    ticket_id, user_id, username, problem = ticket

    cursor.execute("SELECT phone_number FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    phone_number = user[0] if user else "–Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    cursor.execute("UPDATE tickets SET status = 'completed' WHERE id = ?", (ticket_id,))
    conn.commit()
    conn.close()

    await call.message.edit_text(
        call.message.text + "\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        reply_markup=None
    )
    await call.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")

    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ (ID: {ticket_id}) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {problem}\n"
            f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}: {e}")

    await bot.send_message(
        COMMON_CHAT_ID,
        f"‚úÖ –ó–∞—è–≤–∫–∞ (ID: {ticket_id}) –æ—Ç @{username} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {problem}"
    )

@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
